apply plugin: 'osgi'
apply plugin: 'maven-publish'
apply plugin: 'signing'

jar {
    manifest {
        instruction 'Bundle-Description', project.publishName
        instruction 'Bundle-Vendor', project.publishVendor
        instruction 'Implementation-Title', project.publishName
        instruction 'Implementation-Vendor', project.publishVendor
        instruction 'Implementation-Version', project.version
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

publish.dependsOn {
    if (System.getenv("SONATYPE_USERNAME") == null || System.getenv("SONATYPE_PASSWORD") == null) {
        throw new IllegalArgumentException('Environment variables SONATYPE_USERNAME and SONATYPE_PASSWORD' +
                ' must be defined to access the Sonatype repository!')
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            groupId project.group
            artifactId project.archivesBaseName
            version project.version

            pom {
                name = project.publishName
                description = project.publishDescription
                url = project.publishScmUrl

                licenses {
                    license {
                        name = project.publishLicenseName
                        url = project.publishLicenseUrl
                    }
                }

                developers {
                    developer {
                        id = project.publishDeveloperId
                        name = project.publishDeveloperName
                    }
                }

                scm {
                    url = project.publishScmUrl
                    connection = project.publishScmConnection
                    developerConnection = project.publishScmDeveloperConnection
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username System.getenv("SONATYPE_USERNAME")
                password System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
